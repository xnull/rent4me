# You may add here your
# server {
#       ...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

#redirect all traffic to https
server {
       listen         80;
       listen    [::]:80;
       server_name    rent4.me;
       return         301 https://$server_name$request_uri;
}

server {
        listen 443 ssl http2;
        #listen rent4.me:443 ssl http2 default_server;
        listen [::]:443 ssl http2;
#       listen [::]:80 ipv6only=on;

        root /home/tomcat/nginx/prod;
        index index.html index.htm;

        # Make site accessible from http://localhost/
        server_name rent4.me;
        charset utf-8;

        location /rest {
                proxy_pass http://localhost:18080;
        }

        location /ws {
                proxy_pass http://localhost:18080;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
        }

        location /admin {
                proxy_pass http://localhost:19080;
        }

        location /search {
                set $prerender 0;
                if ($http_user_agent ~* "googlebot|yahoo|bingbot|baiduspider|yandex|yeti|yodaobot|gigabot|ia_archiver|facebookexternalhit|twitterbot|developers\.google\.com") {
                        set $prerender 1;
                }

                if ($prerender = 0) {
                        return 301 http://rent4.me/personal/;
                }

                if ($prerender = 1) {
                        rewrite .* /rest/pre_render/search/ break;
                        proxy_pass http://localhost:18080;
                }
        }

        location /sitemap- {
                set $prerender 1;

                if ($prerender = 1) {
                        rewrite .* /rest/pre_render$request_uri break;
                        proxy_pass http://localhost:18080;
                }
        }


        location /sitemap.xml {
                set $prerender 1;

                if ($prerender = 1) {
                        rewrite .* /rest/pre_render/sitemap.xml break;
                        proxy_pass http://localhost:18080;
                }
        }

        location /advert {
                set $prerender 0;
                if ($http_user_agent ~* "googlebot|yahoo|bingbot|baiduspider|yandex|yeti|yodaobot|gigabot|ia_archiver|facebookexternalhit|twitterbot|developers\.google\.com") {
                        set $prerender 1;
                }

                if ($prerender = 0) {
#                       rewrite .* /rest/pre_render$request_uri break;
                        return 301 http://rent4.me/personal/#$request_uri;
#                       proxy_pass http://localhost:28080;
                }

                if ($prerender = 1) {
                        rewrite .* /rest/pre_render$request_uri break;
                        proxy_pass http://localhost:18080;
                }
        }

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
                # Uncomment to enable naxsi on this location
                # include /etc/nginx/naxsi.rules
        }

        ssl on;
	ssl_password_file /etc/nginx/ssl/global.pass;
	ssl_certificate /etc/nginx/ssl/1_rent4.me_bundle.crt;
	ssl_certificate_key /etc/nginx/ssl/rent4.me.key;
#
        ssl_session_timeout 5m;
#
        ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
#        ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_dhparam  /etc/nginx/ssl/dhparam.pem;


        # Only for nginx-naxsi used with nginx-naxsi-ui : process denied requests
        #location /RequestDenied {
        #       proxy_pass http://127.0.0.1:8080;
        #}

        #error_page 404 /404.html;

        # redirect server error pages to the static page /50x.html
        #
        #error_page 500 502 503 504 /50x.html;
        #location = /50x.html {
        #       root /usr/share/nginx/html;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #       fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #       # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        #
        #       # With php5-cgi alone:
        #       fastcgi_pass 127.0.0.1:9000;
        #       # With php5-fpm:
        #       fastcgi_pass unix:/var/run/php5-fpm.sock;
        #       fastcgi_index index.php;
        #       include fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}


# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#       listen 8000;
#       listen somename:8080;
#       server_name somename alias another.alias;
#       root html;
#       index index.html index.htm;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}

# HTTPS server
#
#server {
#       listen 443;
#       server_name localhost;
#
#       root html;
#       index index.html index.htm;
#
#       ssl on;
#       ssl_certificate cert.pem;
#       ssl_certificate_key cert.key;
#
#       ssl_session_timeout 5m;
#
#       ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
#       ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
#       ssl_prefer_server_ciphers on;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}
