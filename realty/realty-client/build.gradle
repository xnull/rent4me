/**
 * Client part of realty application: html and javascript.
 * Decided that source files will be moved from realty-web/src/main/webapp/view
 */
apply from: "${rootProject.projectDir}/gradle/client-deployment.gradle"

defaultTasks 'bowerInstall'

/**
 * https://github.com/srs/gradle-node-plugin
 *
 * tasks: nodeSetup, npmInstall, jsTest
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:0.4'
        //classpath 'com.moowork.gradle:gradle-node-plugin:0.6'
        classpath 'org.hidetake:gradle-ssh-plugin:0.3.10'
    }
}

apply plugin: 'java'
apply plugin: 'node'
apply plugin: 'ssh'

def nodeJsDir = file("${rootProject.projectDir}/.gradle/nodejs")

node {
    // Version of node to use.
    version = '0.11.10'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'http://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = nodeJsDir
}

/**
 * Download js dependencies
 */
task bowerInstallSystem(dependsOn: npmInstall, type: BaseJsTaskRunner) {
    script = new File(project.projectDir, '/node_modules/bower/bin/bower')
    args = ['install']
}

task bowerInstall(type: JsTaskRunner) {
    script = new File(project.projectDir, '/node_modules/gulp/bin/gulp')
    args = ['bower-files']
}

/**
 * Run unit tests
 */
task jsTest(type: JsTaskRunner, dependsOn: 'bowerInstall') {
    script = new File(project.projectDir, '/node_modules/karma/bin/karma')
    args = ['start', 'test/karma.conf.js']
}
test.dependsOn jsTest

task jsBuild(type: JsTaskRunner, dependsOn: 'bowerInstall') {
    script = new File(project.projectDir, '/node_modules/gulp/bin/gulp')
    args = ['jsBuild']
}

task jsHint(type: JsTaskRunner, dependsOn: 'bowerInstall') {
    script = new File(project.projectDir, '/node_modules/gulp/bin/gulp')
    args = ['lint']
}
check.dependsOn jsHint

task packApp(dependsOn: bowerInstall, type: Tar) {
    group = 'Packaging'
    from 'app'
    baseName = 'app'
}

task deployFrontendDev(dependsOn: packApp, type: SshTask) {
    group = 'Deployment'

    def passphrase = "hnzjnjwbfjao";

    ssh {
        knownHosts = allowAnyHosts
    }

    remotes {
        webServer {
            host = "rent4.me"
            user = "root"
            password = passphrase
        }
    }

    session(remotes.webServer) {
        put new File(project.projectDir, 'build/distributions/app-1.0.tar'), '/usr/share/nginx/app/dev/'
        execute 'cd /usr/share/nginx/app/dev;tar -xf app-1.0.tar'
    }
}

task deployFrontendRelease(dependsOn: packApp, type: SshTask) {
    group = 'Deployment'

    def passphrase = "hnzjnjwbfjao";

    ssh {
        knownHosts = allowAnyHosts
    }

    remotes {
        webServer {
            host = "rent4.me"
            user = "root"
            password = passphrase
        }
    }

    session(remotes.webServer) {
        put new File(project.projectDir, 'build/distributions/app-1.0.tar'), '/usr/share/nginx/app/'
        execute 'cd /usr/share/nginx/app/;tar -xf app-1.0.tar'
    }
}

clean << {
    //project.delete './node_modules'
    project.delete './app/vendor'
}

task updateWebDriverManager(type: JsTaskRunner, dependsOn: 'bowerInstall') {
    script = new File(project.projectDir, '/node_modules/protractor/bin/webdriver-manager')
    args = ['update']
}

task startWebDriverManager(dependsOn: updateWebDriverManager, type: JsTaskRunner) {
    script = new File(project.projectDir, '/node_modules/protractor/bin/webdriver-manager')
    args = ['start']
}

task jsE2ETest(dependsOn: updateWebDriverManager, type: JsTaskRunner) {
    script = new File(project.projectDir, '/node_modules/protractor/bin/protractor')
    args = ['test/protractor-conf.js']
}

public class BaseJsTaskRunner extends com.moowork.gradle.node.task.NodeTask {
    BaseJsTaskRunner() {
        group = 'javascript'
        setExecOverrides {
            it.ignoreExitValue = false
            it.workingDir = project.projectDir
        }
    }
}

public class JsTaskRunner extends BaseJsTaskRunner {
    JsTaskRunner() {
        super()
        dependsOn 'bowerInstallSystem'
    }
}
