/**
 * Client part of realty application: html and javascript.
 * Decided that source files will be moved from realty-web/src/main/webapp/view
 */
apply from: "${rootProject.projectDir}/gradle/client-deployment.gradle"

defaultTasks 'npmInstall'

/**
 * https://github.com/srs/gradle-node-plugin
 *
 * tasks: nodeSetup, npmInstall, jsTest
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:0.6'
        classpath 'org.hidetake:gradle-ssh-plugin:0.3.10'
    }
}

apply plugin: 'java'
apply plugin: 'node'
apply plugin: 'ssh'

final buildNumber = java.util.UUID.randomUUID();

final internalGroup = 'Rent4.Me Client custom tasks'
final relevantGroups = [internalGroup]

final distDir = 'dist'
final distExplodedDir = "$distDir/tmp"

def nodeJsDir = file("${rootProject.projectDir}/.gradle/nodejs")


def nodeModuleFile(nodeModule) {
  final path = "/node_modules/$nodeModule/bin/$nodeModule"
  return new File(project.projectDir, path)
}

node {
    // Version of node to use.
    version = '6.4.0'

    // Base URL for fetching node distributions (change if you have a mirror).
    distBaseUrl = 'http://nodejs.org/dist'

    // If true, it will download node using above parameters.
    // If false, it will try to use globally installed node.
    download = true

    // Set the work directory for unpacking node
    workDir = nodeJsDir
}

task cleanUpBuild(type: Delete) {
    group internalGroup
    description "Removes directory where JS file is built using WebPack"
    delete 'build'
}

task cleanNodeModules(type: Delete) {
    group internalGroup
    description "Removes node_modules folder - thus cleares cache for current project"
    delete 'node_modules'
}

task cleanUpDistribution(type: Delete) {
    group internalGroup
    description "Cleans up directory where already built stuff goes, ready for distribution"
    delete distDir
}

task cleanSetup(dependsOn: [cleanNodeModules, npmInstall]) {
  group internalGroup
  description "removes any outdated stuff"
}

task buildProduction(dependsOn: [npmInstall, cleanUpBuild], type: BaseJsTaskRunner) {
  group internalGroup
  description = "Makes build for production"
  script = nodeModuleFile('webpack')
  args = ['-p']
}

task copyBuiltStuff(type: Copy) {
  from('.') {
    include 'build/**'
    include 'index.html'
    include 'css/**'
    include 'external_js/**'
    include 'fonts/**'
    include 'images/**'
  }

  into distExplodedDir
}

task packApp(type: Tar) {
    from distExplodedDir
    baseName = 'app'
    destinationDir = file(distDir)
}

task prepareForDistribution(dependsOn: [buildProduction, cleanUpDistribution, copyBuiltStuff, packApp]) {
  group internalGroup
  description = "Prepares app for distribution"
}

task deployToProd(dependsOn: prepareForDistribution, type: SshTask) {
    group = internalGroup
    description = "Build and deploy to production environment"
    //TODO: promprt it from CLI?
    def passphrase = "k124hfeoifs9";

    ssh {
        knownHosts = allowAnyHosts
    }


    remotes {
        webServer {
            host = "rent4.me"
            user = "tomcat"
            password = passphrase
        }
    }

    session(remotes.webServer) {
        put new File(project.projectDir, 'dist/app.tar'), '/home/tomcat/nginx/prod'
        execute 'cd /home/tomcat/nginx/prod;find ! -name \'app.tar\' -type f -exec rm -f {} +;tar -xf app.tar; chmod -R 755 ./*'
    }
}

task buildDevWatch(dependsOn: npmInstall, type: BaseJsTaskRunner) {
  group internalGroup
  description = "Makes dev build and watches for changes"
  script = nodeModuleFile('webpack')
  args = ['-d']
}

task devWebServer(dependsOn: npmInstall, type: BaseJsTaskRunner) {
  group internalGroup
  description "Starts web-server that's acccessible using url http://127.0.0.1:8080/"
  script = nodeModuleFile('webpack-dev-server')
  args = ['--output-public-path', '/build/']
}

public class BaseJsTaskRunner extends com.moowork.gradle.node.task.NodeTask {
    BaseJsTaskRunner() {
        setExecOverrides {
            it.ignoreExitValue = false
            it.workingDir = project.projectDir
        }
    }
}

public class JsTaskRunner extends BaseJsTaskRunner {
    JsTaskRunner() {
        super()
        dependsOn 'npmInstall'
    }
}
